diff -ruN ../strongswan-5.3.0.orig/src/libcharon/plugins/stroke/stroke_config.c ./src/libcharon/plugins/stroke/stroke_config.c
--- ../strongswan-5.3.0.orig/src/libcharon/plugins/stroke/stroke_config.c	2015-03-31 12:42:35.000000000 -0500
+++ ./src/libcharon/plugins/stroke/stroke_config.c	2015-03-31 12:42:40.000000000 -0500
@@ -1073,6 +1073,7 @@
 				   stroke_end_t *end, child_cfg_t *child_cfg, bool local)
 {
 	traffic_selector_t *ts;
+	char *subnet, *pos;
 
 	if (end->tohost)
 	{
@@ -1086,12 +1087,27 @@
 		{
 			host_t *net;
 
+			pos = strchr(end->address, '|');
+			if (pos)
+				*(pos++) = '\0';
 			net = host_create_from_string(end->address, 0);
 			if (net)
 			{
 				ts = traffic_selector_create_from_subnet(net, 0, end->protocol,
 												end->from_port, end->to_port);
-				child_cfg->add_traffic_selector(child_cfg, local, ts);
+
+				/* Deal with a specified NAT address as part of config as address|NATaddress */
+				if (pos) {
+					traffic_selector_t *tmpts;
+
+					tmpts = traffic_selector_add_nat_from_subnet(ts, pos);
+					if (tmpts == NULL) {
+						DBG1(DBG_CFG, "invalid NAT subnet: %s, skipped", pos);
+						ts->destroy(ts);
+					} else
+						child_cfg->add_traffic_selector(child_cfg, local, ts);
+				} else
+					child_cfg->add_traffic_selector(child_cfg, local, ts);
 			}
 		}
 		else
@@ -1126,8 +1142,22 @@
 				}
 				else
 				{
+					pos = strchr(subnet, '|');
+					if (pos)
+						*(pos++) = '\0';
 					ts = traffic_selector_create_from_cidr(subnet, proto,
 														   from_port, to_port);
+
+					/* Deal with a specified NAT address as part of config as address|NATaddress */
+					if (pos) {
+						traffic_selector_t *tmpts;
+
+						tmpts = traffic_selector_add_nat_from_subnet(ts, pos);
+						if (tmpts == NULL) {
+							DBG1(DBG_CFG, "invalid NAT subnet: %s, skipped", pos);
+							ts->destroy(ts);
+						}
+					}
 				}
 				if (ts)
 				{
diff -ruN ../strongswan-5.3.0.orig/src/libcharon/plugins/kernel_pfkey/kernel_pfkey_ipsec.c ./src/libcharon/plugins/kernel_pfkey/kernel_pfkey_ipsec.c
--- ../strongswan-5.3.0.orig/src/libcharon/plugins/kernel_pfkey/kernel_pfkey_ipsec.c	2015-03-31 12:42:35.000000000 -0500
+++ ./src/libcharon/plugins/kernel_pfkey/kernel_pfkey_ipsec.c	2015-03-31 12:42:40.000000000 -0500
@@ -509,8 +509,8 @@
 		.direction = dir,
 	);
 
-	src_ts->to_subnet(src_ts, &policy->src.net, &policy->src.mask);
-	dst_ts->to_subnet(dst_ts, &policy->dst.net, &policy->dst.mask);
+	src_ts->to_subnetnat(src_ts, &policy->src.net, &policy->src.mask, dir);
+	dst_ts->to_subnetnat(dst_ts, &policy->dst.net, &policy->dst.mask, dir);
 
 	/* src or dest proto may be "any" (0), use more restrictive one */
 	policy->src.proto = max(src_ts->get_protocol(src_ts),
diff -ruN ../strongswan-5.3.0.orig/src/libstrongswan/selectors/traffic_selector.c ./src/libstrongswan/selectors/traffic_selector.c
--- ../strongswan-5.3.0.orig/src/libstrongswan/selectors/traffic_selector.c	2015-03-31 12:42:35.000000000 -0500
+++ ./src/libstrongswan/selectors/traffic_selector.c	2015-03-31 12:43:26.000000000 -0500
@@ -90,6 +90,34 @@
 	};
 
 	/**
+	 * subnet size in CIDR notation, 255 means a non-subnet address range
+	 */
+	u_int8_t natnetbits;
+
+	/**
+	 * begin of address range, network order
+	 */
+	union {
+		/** dummy char for common address manipulation */
+		char natfrom[0];
+		/** IPv4 address */
+		u_int32_t natfrom4[1];
+		/** IPv6 address */
+		u_int32_t natfrom6[4];
+	};
+
+	/**
+	 * end of address range, network order
+	 */
+	union {
+		/** dummy char for common address manipulation */
+		char natto[0];
+		/** IPv4 address */
+		u_int32_t natto4[1];
+		/** IPv6 address */
+		u_int32_t natto6[4];
+	};
+	/**
 	 * begin of port range
 	 */
 	u_int16_t from_port;
@@ -103,6 +131,29 @@
 /**
  * calculate the "to"-address for the "from" address and a subnet size
  */
+static void calc_natrange(private_traffic_selector_t *this, u_int8_t netbits)
+{
+	size_t len;
+	int bytes, bits;
+	u_int8_t mask;
+
+	this->natnetbits = netbits;
+
+	len   = (this->type == TS_IPV4_ADDR_RANGE) ? 4 : 16;
+	bytes = (netbits + 7)/8;
+	bits  = (bytes * 8) - netbits;
+	mask  = bits ? (1 << bits) - 1 : 0;
+
+	memcpy(this->natto, this->natfrom, bytes);
+	memset(this->natfrom + bytes, 0x00, len - bytes);
+	memset(this->natto   + bytes, 0xff, len - bytes);
+	this->natfrom[bytes-1] &= ~mask;
+	this->natto[bytes-1]   |=  mask;
+}
+
+/**
+ * calculate the "to"-address for the "from" address and a subnet size
+ */
 static void calc_range(private_traffic_selector_t *this, u_int8_t netbits)
 {
 	size_t len;
@@ -126,6 +177,53 @@
 /**
  * calculate the subnet size from the "to" and "from" addresses
  */
+static u_int8_t calc_natnetbits(private_traffic_selector_t *this)
+{
+	int byte, bit;
+	u_int8_t netbits;
+	size_t size = (this->type == TS_IPV4_ADDR_RANGE) ? 4 : 16;
+	bool prefix = TRUE;
+
+	/* a perfect match results in a single address with a /32 or /128 netmask */
+	netbits = (size * 8);
+	this->natnetbits = netbits;
+
+	/* go through all bits of the addresses, beginning in the front.
+	 * as long as they are equal, the subnet gets larger
+	 */
+	for (byte = 0; byte < size; byte++)
+	{
+		for (bit = 7; bit >= 0; bit--)
+		{
+			u_int8_t bitmask = 1 << bit;
+
+			if (prefix)
+			{
+				if ((bitmask & this->natfrom[byte]) != (bitmask & this->natto[byte]))
+				{
+					/* store the common prefix which might be a true subnet */
+					netbits = (7 - bit) + (byte * 8);
+					this->natnetbits = netbits;
+					prefix = FALSE;
+				}
+			}
+			else
+			{
+				if ((bitmask & this->natfrom[byte]) || !(bitmask & this->natto[byte]))
+				{
+					this->natnetbits = NON_SUBNET_ADDRESS_RANGE;
+					return netbits;  /* return a pseudo subnet */
+
+				}
+			}
+		}
+	}
+	return netbits;  /* return a true subnet */
+}
+
+/**
+ * calculate the subnet size from the "to" and "from" addresses
+ */
 static u_int8_t calc_netbits(private_traffic_selector_t *this)
 {
 	int byte, bit;
@@ -217,8 +315,8 @@
 	private_traffic_selector_t *this = *((private_traffic_selector_t**)(args[0]));
 	linked_list_t *list = *((linked_list_t**)(args[0]));
 	enumerator_t *enumerator;
-	char from_str[INET6_ADDRSTRLEN] = "";
-	char to_str[INET6_ADDRSTRLEN] = "";
+	char from_str[INET6_ADDRSTRLEN] = "", natfrom_str[INET6_ADDRSTRLEN] = "";
+	char to_str[INET6_ADDRSTRLEN] = "", natto_str[INET6_ADDRSTRLEN] = "";
 	char *serv_proto = NULL, *sep = "";
 	bool has_proto, has_ports;
 	size_t written = 0;
@@ -255,26 +353,34 @@
 		if (this->type == TS_IPV4_ADDR_RANGE)
 		{
 			inet_ntop(AF_INET, &this->from4, from_str, sizeof(from_str));
+			if (this->natnetbits)
+				inet_ntop(AF_INET, &this->natfrom4, natfrom_str, sizeof(natfrom_str));
 		}
 		else
 		{
 			inet_ntop(AF_INET6, &this->from6, from_str, sizeof(from_str));
+			if (this->natnetbits)
+				inet_ntop(AF_INET6, &this->natfrom6, natfrom_str, sizeof(natfrom_str));
 		}
 		if (this->netbits == NON_SUBNET_ADDRESS_RANGE)
 		{
 			if (this->type == TS_IPV4_ADDR_RANGE)
 			{
 				inet_ntop(AF_INET, &this->to4, to_str, sizeof(to_str));
+				if (this->natnetbits)
+					inet_ntop(AF_INET, &this->natto4, natto_str, sizeof(natto_str));
 			}
 			else
 			{
 				inet_ntop(AF_INET6, &this->to6, to_str, sizeof(to_str));
+				if (this->natnetbits)
+					inet_ntop(AF_INET6, &this->natto6, natto_str, sizeof(natto_str));
 			}
-			written += print_in_hook(data, "%s..%s", from_str, to_str);
+			written += print_in_hook(data, "%s|%s..%s|%s", from_str, natfrom_str, to_str, natto_str);
 		}
 		else
 		{
-			written += print_in_hook(data, "%s/%d", from_str, this->netbits);
+			written += print_in_hook(data, "%s/%d|%s/%d", from_str, this->netbits, natfrom_str, this->natnetbits);
 		}
 	}
 
@@ -444,6 +550,12 @@
 	memcpy(subset->from, from, size);
 	memcpy(subset->to, to, size);
 	calc_netbits(subset);
+	if (this->natnetbits) {
+		subset->natnetbits = this->natnetbits;
+		memcpy(subset->natfrom, this->natfrom, size);
+		memcpy(subset->natto, this->natto, size);
+		calc_natnetbits(subset);
+	}
 
 	return &subset->public;
 }
@@ -659,6 +771,58 @@
 	return this->netbits != NON_SUBNET_ADDRESS_RANGE;
 }
 
+METHOD(traffic_selector_t, to_subnetnat, bool,
+	private_traffic_selector_t *this, host_t **net, u_int8_t *mask, policy_dir_t dir)
+{
+	if (this->natnetbits && dir == POLICY_OUT) {
+		/* there is no way to do this cleanly, as the address range may
+		 * be anything else but a subnet. We use from_addr as subnet
+		 * and try to calculate a usable subnet mask.
+		 */
+		int family, non_zero_bytes;
+		u_int16_t port = 0;
+		chunk_t net_chunk;
+
+		*mask = (this->natnetbits == NON_SUBNET_ADDRESS_RANGE) ? calc_natnetbits(this)
+											: this->natnetbits;
+
+		switch (this->type)
+		{
+			case TS_IPV4_ADDR_RANGE:
+				family = AF_INET;
+				net_chunk.len = sizeof(this->natfrom4);
+				break;
+			case TS_IPV6_ADDR_RANGE:
+				family = AF_INET6;
+				net_chunk.len = sizeof(this->natfrom6);
+				break;
+			default:
+				/* unreachable */
+				return FALSE;
+		}
+
+		net_chunk.ptr = malloc(net_chunk.len);
+		memset(net_chunk.ptr, 0x00, net_chunk.len);
+		if (*mask)
+		{
+			non_zero_bytes = (*mask + 7) / 8;
+			memcpy(net_chunk.ptr, this->natfrom, non_zero_bytes);
+			net_chunk.ptr[non_zero_bytes-1] &= 0xFF << (8 * non_zero_bytes - *mask);
+		}
+
+		if (this->to_port == this->from_port)
+		{
+			port = this->to_port;
+		}
+
+		*net = host_create_from_chunk(family, net_chunk, port);
+		chunk_free(&net_chunk);
+
+		return this->natnetbits != NON_SUBNET_ADDRESS_RANGE;
+	} else
+		return this->public.to_subnet((traffic_selector_t *)this, net, mask);
+}
+
 METHOD(traffic_selector_t, clone_, traffic_selector_t*,
 	private_traffic_selector_t *this)
 {
@@ -667,6 +831,7 @@
 	clone = traffic_selector_create(this->protocol, this->type,
 									this->from_port, this->to_port);
 	clone->netbits = this->netbits;
+	clone->natnetbits = this->natnetbits;
 	clone->dynamic = this->dynamic;
 
 	switch (clone->type)
@@ -674,10 +839,14 @@
 		case TS_IPV4_ADDR_RANGE:
 			memcpy(clone->from4, this->from4, sizeof(this->from4));
 			memcpy(clone->to4, this->to4, sizeof(this->to4));
+			memcpy(clone->natfrom4, this->natfrom4, sizeof(this->natfrom4));
+			memcpy(clone->natto4, this->natto4, sizeof(this->natto4));
 			return &clone->public;
 		case TS_IPV6_ADDR_RANGE:
 			memcpy(clone->from6, this->from6, sizeof(this->from6));
 			memcpy(clone->to6, this->to6, sizeof(this->to6));
+			memcpy(clone->natfrom6, this->natfrom6, sizeof(this->natfrom6));
+			memcpy(clone->natto6, this->natto6, sizeof(this->natto6));
 			return &clone->public;
 		default:
 			/* unreachable */
@@ -814,6 +983,54 @@
 	return (&this->public);
 }
 
+
+traffic_selector_t *traffic_selector_add_nat_from_subnet(traffic_selector_t *this, char *string)
+{
+	private_traffic_selector_t *ts = (private_traffic_selector_t *)this;
+	chunk_t from;
+	host_t *net;
+	int bits;
+
+	/* Just as safety belt */
+	if (ts == NULL)
+		return NULL;
+
+	net = host_create_from_subnet(string, &bits);
+	if (!net)
+		return NULL;
+
+	/* Error checking */
+	switch (net->get_family(net))
+	{
+		case AF_INET:
+#if 0
+			if (ts->type != TS_IPV4_ADDR_RANGE) {
+				net->destroy(net);
+				return NULL;
+			}
+			break;
+#endif
+		case AF_INET6:
+#if 0
+			if (ts->type != TS_IPV6_ADDR_RANGE) {
+				net->destroy(net);
+				return NULL;
+			}
+#endif
+			break;
+		default:
+			net->destroy(net);
+			return NULL;
+	}
+	from = net->get_address(net);
+	memcpy(ts->natfrom, from.ptr, from.len);
+	bits = min(bits, ts->type == TS_IPV4_ADDR_RANGE ? 32 : 128);
+	calc_natrange(ts, bits);
+	net->destroy(net);
+
+	return &ts->public;
+}
+
 /*
  * see header
  */
@@ -984,6 +1201,7 @@
 			.includes = _includes,
 			.set_address = _set_address,
 			.to_subnet = _to_subnet,
+			.to_subnetnat = _to_subnetnat,
 			.clone = _clone_,
 			.hash = _hash,
 			.destroy = _destroy,
diff -ruN ../strongswan-5.3.0.orig/src/libstrongswan/selectors/traffic_selector.h ./src/libstrongswan/selectors/traffic_selector.h
--- ../strongswan-5.3.0.orig/src/libstrongswan/selectors/traffic_selector.h	2015-03-31 12:42:35.000000000 -0500
+++ ./src/libstrongswan/selectors/traffic_selector.h	2015-03-31 12:42:40.000000000 -0500
@@ -28,6 +28,7 @@
 
 #include <library.h>
 #include <networking/host.h>
+#include <ipsec/ipsec_types.h>
 
 /**
  * Traffic selector types.
@@ -219,6 +220,7 @@
 	 * @return			TRUE if traffic selector matches exactly to the subnet
 	 */
 	bool (*to_subnet) (traffic_selector_t *this, host_t **net, u_int8_t *mask);
+	bool (*to_subnetnat) (traffic_selector_t *this, host_t **net, u_int8_t *mask, policy_dir_t dir);
 
 	/**
 	 * Create a hash value for the traffic selector.
@@ -373,6 +375,8 @@
 							host_t *net, u_int8_t netbits, u_int8_t protocol,
 							u_int16_t from_port, u_int16_t to_port);
 
+traffic_selector_t *traffic_selector_add_nat_from_subnet(traffic_selector_t *, char *);
+
 /**
  * Create a traffic selector for host-to-host cases.
  *
